#!/usr/bin/env bash

usage() {
    cat <<EOF
Usage: $0 {-h HOST[:PORT] | -f PATH} LANG DIR

Generates an HTTP client for the specified language.

Arguments:
    -f PATH         Selects a file system path for the location of the source
                    spec file.  Mutually exclusive with -h.

    -h HOST[:PORT]  Selects the host and optional port of a SingleStore HTTP 
                    Proxy, from which the source spec will be downloaded.
                    Mutually exclusive with -f.

    LANG            Selects the client language to generate (see below).

    DIR             Specifies the directory where generated code will be 
                    written.  Will be created if it doesn't exist.

Supported languages:
    js              JavaScript client
    php             PHP client

Examples:
    Generate a PHP client from the S2 Proxy on localhost, port 8080:
        `basename $0` localhost:8080 php /var/www/html/s2-php

    Generate a JavaScript client from a file.
        `basename $0` /tmp/openapi3.yaml javascript /var/www/html/s2-js

EOF
    exit 1
}

find-cmd() {
    local INCMD="$1"
    local INTYPE=$(type -t "${INCMD}")
    check-err "Could not find command ${INCMD} in shell or PATH.  Exiting."
    local OUTCMD="${INCMD}"
    [ "${INTYPE}" = "file" ] && OUTCMD=$(type -P "${INCMD}")
    echo "${OUTCMD}"
}

check-err() {
    local CODE=$?
    if [ ${CODE} -ne 0 ] ; then
        echo "ERROR: $1"
        exit ${CODE}
    fi
}

impossible() {
    echo "This shouldn't happen!"
    exit 1
}

jq-in-place() {
    local EXPR="$1"
    local TGT="$2"
    local TMPFILE="`mktemp`"

    ${_JQ} "${EXPR}" "${TGT}" > "$TMPFILE"
    check-err "Error running 'jq'.  Exiting."
    ${_MV} "${TMPFILE}" "${TGT}"
    check-err "Error overwrite ${TGT}.  Exiting."
    ${_RM} -f "$TMPFILE"
    check-err "Error removing ${TMPFILE}.  Exiting."
}

patch-php() {
    # The package.json file openapi-generator creates doesn't have many 
    # anchors for extension, and I don't want to template the whole thing
    # because there's a lot of stuff in there that's apt to change.  So,
    # We'll just hack in some values that apparently aren't templatable
    # using 'jq'.
    local COMPJSON="${OUTDIR}/composer.json"
    jq-in-place '.license |= "Apache-2.0"' "${COMPJSON}"
    jq-in-place '.homepage |= "https://singlestore.com"' "${COMPJSON}"
    jq-in-place '.authors |= [{ "name": "SingleStore", "homepage": "http://www.singlestore.com"}] + .' "${COMPJSON}"
}

patch-js() {
    # The JS openapi-generator wants to "sanitize" the description in the
    # package.json file, which ends up substituting an underscore for all 
    # spaces and punctuation.  Seems to be a bug.  To workaround, we'll
    # grab the decription out of the input YAML spec and replace it ourselves.
    SPECDESC=`"${_DOCKER}" run --rm \
        -v "${OUTDIR}":/work       \
        mikefarah/yq               \
            eval '.info.description' /work/openapi3.yaml
    `
    check-err "Error running 'yq'.  Exiting."
    local PACKJSON="${OUTDIR}/package.json"
    jq-in-place ".description |= \"$SPECDESC\"" "${PACKJSON}"
}

# Check args.
[ $# -ne 4 ] && usage
SRCTYPE=$1
SOURCE=$2
LANGUAGE=$3
OUTDIR=$4

case "${SRCTYPE}" in
    -f) SRCTYPE=file ;;
    -h) SRCTYPE=host ;;
    *)  usage        ;;
esac

# Find programs we need.
_DIRNAME=$(find-cmd dirname)
_MKDIR=$(find-cmd mkdir)
_PWD=$(find-cmd pwd)
_CP=$(find-cmd cp)
_MV=$(find-cmd mv)
_RM=$(find-cmd rm)
_ID=$(find-cmd id)
_GREP=$(find-cmd grep)
_DOCKER=$(find-cmd docker)
_CURL=$(find-cmd curl)
_JQ=$(find-cmd jq)

# Get this script's dir.
MYDIR=$(cd $("${_DIRNAME}" "$0") && ${_PWD})

# Make sure the language is supported.
SUPPORTED="js php"
echo "${SUPPORTED}" | "${_GREP}" -wq "${LANGUAGE}" > /dev/null 2>&1
check-err "Unsupported language: ${LANGUAGE}"

# Create the output directory.
"${_MKDIR}" -p "${OUTDIR}"
check-err "Error creating directory ${OUTDIR}.  Exiting."
OUTDIR=$(cd "${OUTDIR}" && "${_PWD}")
SPECFILE="${OUTDIR}/openapi3.yaml"

# If host type, fetch the openapi3 spec from the proxy, otherwise
# get it from the filesystem..
case "${SRCTYPE}" in
    host)
        echo "Fetching spec file from proxy: ${SOURCE}..."
        "${_CURL}" -s -o "${SPECFILE}" "${SOURCE}/api/v1/spec"
        check-err "Error downloading spec file.  Exiting."
        ;;
    file)
        echo "Copying spec file from path: ${SOURCE} ..."
        "${_CP}" "${SOURCE}" "${SPECFILE}"
        ;;
    *)
        impossible
        ;;
esac

# Map the input language to the generator language.
GENLANG=
case "${LANGUAGE}" in
    php) GENLANG=php        ;;
    js)  GENLANG=javascript ;;
    *)   impossible         ;;
esac

# Get user and group IDs.
USRID=$(${_ID} -u)
check-err "Error getting user ID.  Exiting."
GRPID=$(${_ID} -g)
check-err "Error getting group ID.  Exiting."

# Generate the client.
echo "Generating client API ..."
IMAGE=openapitools/openapi-generator-cli
${_DOCKER} run                                  \
    --rm                                        \
    -v "${OUTDIR}:/out"                         \
    -v "${MYDIR}:/src"                          \
    --user ${USRID}:${GRPID}                    \
    ${IMAGE}                                    \
    generate                                    \
        -i /src/openapi3.yaml                   \
        -g "${GENLANG}"                         \
        -c "/src/config/${LANGUAGE}.yaml"       \
        -o /out                                 \
        -t "/src/templates/${LANGUAGE}"         \
        --api-package=Client                    \
        --model-package=Client                  \
        --package-name=SingleStore              \
        --invoker-package=SingleStore           \
    > /dev/null
check-err "Error generating client.  Exiting."


# Copy the suppmental files over to the output directory.
echo "Adding supplemental files ..."
while read SUPPFILE ; do 
    "${_CP}" "${SUPPFILE}" "${OUTDIR}"
done <<-EOF
    ${MYDIR}/examples/example.${LANGUAGE}
    ${MYDIR}/CONTRIBUTING.md
    ${MYDIR}/LICENSE
EOF

# Do some post-process patching.
echo "Patching files ..."
case "${LANGUAGE}" in
    php) patch-php  ;;
    js)  patch-js   ;;
    *)   impossible ;;
esac

echo "Done."

